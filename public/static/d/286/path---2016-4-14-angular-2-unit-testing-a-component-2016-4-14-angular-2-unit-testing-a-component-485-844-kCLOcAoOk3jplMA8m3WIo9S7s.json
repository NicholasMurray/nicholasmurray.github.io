{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"ea013393-5f74-5b4d-96fb-47d798a84802","excerpt":"Angular2  - Components In Angular2 Components are the way we add behaviour to new DOM elements that we add to an application whereas \nDirectives add behaviour…","html":"<p><img src=\"/images/High_voltage_test_set.jpg\" alt=\"alt text \" title=\"Angular2 - unit Testing a component\"></p>\n<h1>Angular2  - Components</h1>\n<p>In Angular2 Components are the way we add behaviour to new DOM elements that we add to an application whereas\nDirectives add behaviour to existing elements. Components allow us to break down an application into smaller\npieces of code that can encapsulate behaviour and functionality. This allows us to test the component\nseparately from the rest of the application. The component that we will unit test renders a supplied club\nmembers fullname in a span tag.</p>\n<h2>Club Member Model</h2>\n<p>The club member component requires a club member to be supplied, so we will create a club member model\nthat we can use to pass a club member as input to the component. The club member model needs two properties -\na firstname and a surname - and we will also need to return function to return a fullname.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export class ClubMemberModel {\n\n    constructor(\n        public firstname: string = &#39;&#39;,\n        public surname: string = &#39;&#39;\n    ) {};\n\n    fullname() {\n        return (this.firstname + &#39; &#39; + this.surname);\n    }\n}\n\n{% endhighlight %}\n\n\n## Club Member Model Unit Test\n\nThe club member renderer component is going to have an Input property that is in the form of a club member \nmodel. So as the club member renderer component relies on the club member model we should unit test our \nclub member model first to ensure that it works as expected. \n\n\nFirstly we need to import *describe*, *it* and *expect* from *angular2/testing* and \n*ClubMemberModel* from *club-member-model.ts*. Then we can test that the club member model returns firstname, \nsurname and fullname in line with our expectations.</code></pre></div>\n<p>import {\ndescribe,\nit,\nexpect\n} from ‘angular2/testing’;</p>\n<p>import {ClubMemberModel} from ‘./club-member-model’;</p>\n<p>describe(‘ClubMemberModel’, () => {</p>\n<p>  it(‘should return the correct properties’, () => {</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  var newClubMember = new ClubMemberModel();\n  newClubMember.firstname = &#39;John&#39;;\n  newClubMember.surname = &#39;Velo&#39;;\n\n  expect(newClubMember.firstname).toBe(&#39;John&#39;);\n  expect(newClubMember.surname).toBe(&#39;Velo&#39;);\n  expect(newClubMember.fullname()).toBe(&#39;John Velo&#39;);</code></pre></div>\n<p>  });</p>\n<p>});</p>\n<p>{% endhighlight %}</p>\n<h2>Club Member Renderer</h2>\n<p>The club member renderer component comprises of a <em>selector</em>, a <em>template</em> and has a databound <em>Input</em> property\nof clubmember. The selector parameter is the replacement for the naming conventions that were previously\nin directives and works in the same fashion as a querySelector that searches for an element called\nclub-member-renderer upon which it will instatiate itself. The template parameter is an inline template\nthat contains span tags that wrap an angular expression which evaluates clubmember.fullname(). Finally\nthere is a a data bound input property of clubmember which will be passed to template for evaluation.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import {Component, Input} from &#39;angular2/core&#39;;\n\n@Component({\n    selector: &#39;club-member-renderer&#39;,\n    template:   `&lt;span&gt;{{ clubmember.fullname() }}&lt;/span&gt;`\n})\nexport class ClubMemberRenderer {\n    @Input() clubmember;\n}\n\n{% endhighlight %}\n\n\n## Club Member Renderer Unit Test\n\nA component requires more setup than our previous model test. Intially we will have to import *describe*, \n*it*, *expect*, *inject*, *beforeEach*, *beforeEachProviders* and *TestComponentBuilder* from \n*angular2/testing*. Then next import *ClubMemberRenderer* from *club-member-renderer.ts* and \n*ClubMemberModel* from *club-member-model*.\n\nSucceeding the imports is some setup for the test using the *beforeEachProviders*  and *inject* functions \nto bootstrap the test, instantiating the component under test. Then in the test we can create asynchronously \nthe ClubMemberRenderer component verifying that the span element it creates, will render the fullname of a \nclub member, if passed an instance of a ClubMemberModel containing a firstname and surname.</code></pre></div>\n<p>import {\ndescribe,\nit,\nexpect,\ninject,\nbeforeEach,\nbeforeEachProviders,\nTestComponentBuilder\n} from ‘angular2/testing’;</p>\n<p>import {ClubMemberRenderer} from “./club-member-renderer”;\nimport {ClubMemberModel} from “./club-member-model”;\n<br>\ndescribe(‘ClubMemberRenderer: component’, () => {\nlet tcb;</p>\n<p>  //setup\nbeforeEachProviders(() => [\nTestComponentBuilder,\nClubMemberRenderer\n]);</p>\n<p>  beforeEach(inject([TestComponentBuilder], _tcb => {\ntcb = _tcb\n}));</p>\n<p>  //specs\nit(‘should render club member name’, done => {\ntcb.createAsync(ClubMemberRenderer).then(fixture => {\nlet clubMemberFixture = fixture.componentInstance,\nelement = fixture.nativeElement;\n<br>\nvar newClubMember = new ClubMemberModel();\nnewClubMember.firstname = ‘John’;\nnewClubMember.surname = ‘Velo’;\n<br>\nclubMemberFixture.clubmember = newClubMember;\n<br>\nfixture.detectChanges(); //trigger change detection\nexpect(element.querySelector(‘span’).innerText).toBe(‘John Velo’);\ndone();\n})\n.catch(e => done.fail(e));\n});\n});</p>\n<p>{% endhighlight %}</p>\n<h2>Club Member Renderer in action</h2>\n<p>So how is the club member renderer used in the context of an Angular2 app? First we create an app component\nthat imports <em>Component</em> and <em>Input</em> from <em>angular2/core</em>, <em>ClubMemberModel</em> from <em>club-member-model</em> and\nthen <em>ClubMemberRenderer</em> from <em>club-member-renderer</em>. Next we declare the selector parameter of <em>app</em>,\na template parameter which contains a <em><club-member-renderer></em> element and then a directive reference to\nthe <em>ClubMemberRenderer</em> component. The App class contains a variable <em>clubMember</em> declared as type\n<em>ClubMemberModel</em> then in the constructor <em>clubMember</em> is set to a new instance of <em>ClubMemberModel</em>\ncomprising of a firstname and surname.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import {Component, Input} from &#39;angular2/core&#39;;\nimport {ClubMemberModel} from &#39;./club-member-model&#39;;\nimport {ClubMemberRenderer} from &#39;./club-member-renderer&#39;;\n\n@Component({\n\tselector: &#39;app&#39;,\n\ttemplate: `&lt;div&gt;\n\t            &lt;club-member-renderer [clubmember]=&quot;clubMember&quot;&gt;&lt;/club-member-renderer&gt;\n\t           &lt;/div&gt;`,\n\tdirectives: [ClubMemberRenderer]\n})\nexport class App {\n  clubMember: ClubMemberModel;\n  \n  constructor() {\n    \n    this.clubMember = new ClubMemberModel(&quot;John&quot;, &quot;Velo&quot;);\n  }\n}\n\n{% endhighlight %}\n\n\n## Plunker Links\n\nThe code for the *ClubMemberRenderer* unit tests are available in this &lt;a href=&quot;https://plnkr.co/XcBugFIxCpS7ARyEHBXK&quot; target=&quot;_blank&quot;&gt;plnkr&lt;/a&gt; \nand the *ClubMemberRenderer* in action code is available in this &lt;a href=&quot;https://plnkr.co/QYMkClDh6t7nYPfbcaZO&quot; target=&quot;_blank&quot;&gt;plnkr&lt;/a&gt;. </code></pre></div>","frontmatter":{"title":"Angular2 - Unit Testing a component","date":null}}},"pageContext":{"slug":"/2016-4-14-angular2-unit-testing-a-component/2016-4-14-angular2-unit-testing-a-component/","previous":{"fields":{"slug":"/2016-5-29-the-apple-watch-at-a-glance/2016-5-29-the-apple-watch-at-a-glance/"},"frontmatter":{"title":"The Apple Watch at a Glance"}},"next":{"fields":{"slug":"/2016-3-10-typescript-spread-operator/2016-3-10-typescript-spread-operator/"},"frontmatter":{"title":"Typescript Spread Operator"}}}}