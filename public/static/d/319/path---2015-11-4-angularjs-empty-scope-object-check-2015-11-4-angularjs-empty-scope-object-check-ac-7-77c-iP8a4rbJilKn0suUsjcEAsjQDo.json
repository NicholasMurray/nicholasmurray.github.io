{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"f25dcf39-78c0-5396-9cd8-dcbe254446d9","excerpt":"Creating an empty $scope object In AngularJS there are many cases where you will create a $scope object and initialise it as an empty object. A typical case…","html":"<p><img src=\"/images/empty-property.jpg\" alt=\"alt text \" title=\"How to check for an empty AngularJS $scope object\"></p>\n<h1>Creating an empty $scope object</h1>\n<p>In AngularJS there are many cases where you will create a $scope object and initialise it as an empty object.</p>\n<p>A typical case would be when you are going to open a form modal to allow the addition of a new person.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vm.showAddPersonModal = function() {                   \t\n  $scope.person = {};\n  $scope.action = &#39;Add&#39;;\n  $scope.isAdd = true;\n  $scope.modal.show();\t\n};</code></pre></div>\n<h1>Checking if object is still empty</h1>\n<p>One of the ways in which a modal can be dismissed is by clicking outside the modal area and that can leave us with an empty object\nif no data has been entered and saved.</p>\n<p>So, if we are listening to the modal being hidden and we wish to take some action if the object is empty,\nhow can we verify this?</p>\n<p>We can check if the object is empty by looping over the properties explicitly</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function isEmpty(obj) {\n    for(var prop in obj) {\n        if(obj.hasOwnProperty(prop))\n            return false;\n    }\n    return true;\n}\t</code></pre></div>\n<p>or by, my preferred method, counting the object keys length </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var obj = {};\nreturn Object.keys(obj).length; //returns 0 if empty or an integer &gt; 0 if non-empty</code></pre></div>\n<p>So let’s see this in action</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$scope.$on(&#39;modal.hidden&#39;, function() {\n  if (Object.keys($scope.person).length == 0) {\n    // object empty\n    // logic\n  }\n});</code></pre></div>","frontmatter":{"title":"How to check for an empty AngularJS $scope object","date":"November 04, 2015"}}},"pageContext":{"slug":"/2015-11-4-angularjs-empty-$scope-object-check/2015-11-4-angularjs-empty-$scope-object-check/","previous":{"fields":{"slug":"/2015-10-2-debugging-angularjs-$scope-in-a-browser-console/2015-10-2-debugging-angularjs-$scope-in-a-browser-console/"},"frontmatter":{"title":"How to debug AngularJS $scope in a browser console"}},"next":{"fields":{"slug":"/2015-11-11-angularjs-execute-a-custom-directive-link-function-after-ngBind-or-interpolation/2015-11-11-angularjs-execute-a-custom-directive-link-function-after-ngBind-or-interpolation/"},"frontmatter":{"title":"AngularJS how to execute a custom directive link or compile function after ngBind or interpolation"}}}}