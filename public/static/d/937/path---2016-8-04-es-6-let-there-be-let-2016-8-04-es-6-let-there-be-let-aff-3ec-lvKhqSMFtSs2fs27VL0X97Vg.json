{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"5adfc05c-8942-5eca-a301-cdabbb7c7072","excerpt":"In the beginning there was var And  var  was a little bit tricky to understand. So, along came es6 with the new \nshiny  let . Block level scoping In javascript…","html":"<p><img src=\"/images/let-there-be-light.jpg\" alt=\"alt text \" title=\"ES6 Let there be let\"></p>\n<h1>In the beginning there was var</h1>\n<p>And <strong><em>var</em></strong> was a little bit tricky to understand. So, along came es6 with the new\nshiny <strong><em>let</em></strong>.</p>\n<h2>Block level scoping</h2>\n<p>In javascript the setting of a variable can be the cause of bugs due to way javascript allows\nthe assigning of values. For example, in the code below you would think that declaring and\nassigning a value to a variable inside a block of code would isolate it from the rest of the\ncode. But javascript does not have block level scoping. So, in the code below the variable\n<strong><em>messageInBottle</em></strong> takes its value from the second assignment and not the first.</p>\n<p>{% highlight html %}</p>\n<p>var messageInBottle = ‘Help me!’;\n{\nvar messageInBottle = ‘Would you like a pen pal?’;\n}\nconsole.log(messageInBottle);</p>\n<p>// output: Would you like a pen pal?</p>\n<p>{% endhighlight %}</p>\n<p>Javascript has function level scoping which encapsulates <strong><em>var</em></strong> declarations and assignments\nand therefore in the code below the first assignment of <strong><em>messageInBottle</em></strong> is unaffected by the\nsecond assignment.</p>\n<p>{% highlight html %}</p>\n<p>var messageInBottle = ‘Help me!‘;</p>\n<p>function bottle() {\nvar messageInBottle = ‘Would you like a pen pal?’;\n}</p>\n<p>console.log(messageInBottle);</p>\n<p>// output: Help me!</p>\n<p>{% endhighlight %}</p>\n<p>With es6 the introduction of the <strong><em>let</em></strong> keyword introduces block level variable scoping. This\nallows the declaration and assignment of variables that have block level scope. Now we can\nsee that the first <strong><em>messageInBottle</em></strong> <strong><em>let</em></strong> variable retains its value as the second\n<strong><em>messageInBottle</em></strong> <strong><em>let</em></strong> variable is restricted to the scope of its code block. </p>\n<p>{% highlight html %}</p>\n<p>let messageInBottle = ‘Help me!’;\n{\nlet messageInBottle = ‘Would you like a pen pal?’;\n}\nconsole.log(messageInBottle);</p>\n<p>// output: Help me!</p>\n<p>{% endhighlight %}</p>\n<h2>Hoisted by your own petard</h2>\n<p>In the code below we would expect the output to be the range of numbers 0-9 squared but\nthe output is in fact the number 10 repeated 10 times. This occurs due to the reference\nof <strong><em>n</em></strong> pointing to the value of n in the loop which has exited when it incremented to\nthe number 10. This variable hoisting moves the declaration of the variable <strong><em>n</em></strong> out\nof the loop and instead to the top of the function scope.</p>\n<p>{% highlight html %}</p>\n<p>var squares = [];</p>\n<p>for (var n = 0; n &#x3C; 10; n ++) {\nsquares.push(function() {\nconsole.log(n * n);\n});\n}</p>\n<p>squares.forEach(function(s) {\ns();\n});</p>\n<p>// output:\n// 10\n// 10\n// 10\n// 10\n// 10\n// 10\n// 10\n// 10\n// 10\n// 10</p>\n<p>{% endhighlight %}</p>\n<p>This can be solved by using a closure which are nested functions that retain a reference to\nthe enviroment in which they were created. The closure retains the value of n that it was\npassed during its creation. We now see the expected output of the range 0-9 squared.</p>\n<p>{% highlight html %}</p>\n<p>var squares = [];</p>\n<p>for (var n = 0; n &#x3C; 10; n ++) {\nsquares.push(function(i) {\nconsole.log(i * i);\n}(n));\n}</p>\n<p>squares.forEach(function(s) {\n});</p>\n<p>// output:\n// 0\n// 1\n// 4\n// 9\n// 16\n// 25\n// 36\n// 49\n// 64\n// 81</p>\n<p>{% endhighlight %}</p>\n<p>The newly introduced <strong><em>let</em></strong> keyword can help us gain the expected output by its ability\nto create a new instance of <strong><em>n</em></strong> each time the code goes through the for loop.</p>\n<p>{% highlight html %}</p>\n<p>var squares = [];</p>\n<p>for (let n = 0; n &#x3C; 10; n ++) {\nsquares.push(function() {\nconsole.log(n * n);\n});\n}</p>\n<p>squares.forEach(function(s) {\ns();\n});</p>\n<p>// output:\n// 0\n// 1\n// 4\n// 9\n// 16\n// 25\n// 36\n// 49\n// 64\n// 81</p>\n<p>{% endhighlight %}</p>\n<p>Photo Credit: <a href=\"https://unsplash.com/@celestekorol\">Celeste Korol</a> via <a href=\"https://unsplash.com/\">Unsplash</a></p>","frontmatter":{"title":"ES6 Let there be let","date":null}}},"pageContext":{"slug":"/2016-8-04-es6-let-there-be-let/2016-8-04-es6-let-there-be-let/","previous":{"fields":{"slug":"/2017-3-18-react-random-squares-avatar/2017-3-18-react-random-squares-avatar/"},"frontmatter":{"title":"React Random Squares Avatar"}},"next":{"fields":{"slug":"/2016-7-14-es6-string-template-literals/2016-7-14-es6-string-template-literals/"},"frontmatter":{"title":"ES6 String Template Literals"}}}}