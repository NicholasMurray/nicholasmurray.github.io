{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"d2a1f39c-6d1b-5cca-84af-646a680a5a31","excerpt":"Template Literals ES6 has introduced Template Literals as a new way of working with strings and string \ntemplates. Template Literals have ensured that working with strings will no longer be \nas painful as it once was. The main benefits are: Back…","html":"<p><img src=\"%7B%7B%20site.baseurl%20%7D%7D/images/stringballs.jpg\" alt=\"alt text \" title=\"es6 String Template Literals\"></p>\n<h1>Template Literals</h1>\n<p>ES6 has introduced Template Literals as a new way of working with strings and string\ntemplates. Template Literals have ensured that working with strings will no longer be\nas painful as it once was.</p>\n<p>The main benefits are:</p>\n<ul>\n<li>Back ticks - no more escaping</li>\n<li>Multi-line - now less characters </li>\n<li>Interpolation - not only variables but any expressions</li>\n</ul>\n<h2>No more escaping</h2>\n<p>The clever use of the ` back tick character to enclose text means that the common problem\nof escaping your double quotes or single quotes is not longer an issue.</p>\n<p>Before whether you used single or double quotes to wrap text you eventually end up\nescaping quotes within the text.</p>\n<p>{% highlight html %}</p>\n<p>var lyric = ‘I’m a lumberjack and I’m ok’;</p>\n<p>var button = “&#x3C;button class=”btn btn-primary”>Save</button>“;</p>\n<p>{% endhighlight %}</p>\n<p>Now the back ticks negate the escaping problem.</p>\n<p>{% highlight html %}</p>\n<p>var Q = <code class=\"language-text\">&#39;Have you any idea&#39;, he said, &#39;what &quot;dillygrout&quot; is?&#39;</code>;</p>\n<p>{% endhighlight %}</p>\n<h2>Multi-line formating</h2>\n<p>There are traditionally two ways to format strings over multiple lines, without using a\nfunction, which involved either string concatenation or the lesser known method of adding\na backslash to the end of a line.</p>\n<p>{% highlight html %}</p>\n<p>var exampleHTML = ”<body>\\n” +\n”  <h1>Header Text</h1>\\n” +\n”  <p>Paragraph Text</p>\\n” +\n”</body>“;</p>\n<p>var exampleHTML2 = ”<body>\\n\\</p>\n  <h1>Header Text</h1>\\n\\\n  <p>Paragraph Text</p>\\n\\\n</body>\";\n<p>{% endhighlight %}</p>\n<p>Which can be now resolved by the neater wrapping text with back ticks.</p>\n<p>{% highlight html %}</p>\n<p>var exampleHTML3 = `<body></p>\n  <h1>Header Text</h1>\n  <p>Paragraph Text</p>\n</body>`;\n<p>{% endhighlight %}</p>\n<h2>Interpolation</h2>\n<p>ES6 facilitates interpolation by using the ${expession} notation to replace the syntax of\na variable preceded and/or succeeded by a plus sign.</p>\n<p>Plus syntax.</p>\n<p>{% highlight html %}</p>\n<p>var a = 4;\nalert(a + ’ cubed is ’ + (a * a * a));</p>\n<p>{% endhighlight %}</p>\n<p>The more readable new ${expession} syntax.</p>\n<p>{% highlight html %}</p>\n<p>var a = 4;\nalert(<code class=\"language-text\">${a} cubed is ${a * a * a}</code>);</p>\n<p>{% endhighlight %}</p>","frontmatter":{"title":"ES6 String Template Literals","date":null}}},"pageContext":{"slug":"/2016-7-14-es6-string-template-literals/2016-7-14-es6-string-template-literals/","previous":{"fields":{"slug":"/2016-8-04-es6-let-there-be-let/2016-8-04-es6-let-there-be-let/"},"frontmatter":{"title":"ES6 Let there be let"}},"next":{"fields":{"slug":"/2016-5-29-the-apple-watch-at-a-glance/2016-5-29-the-apple-watch-at-a-glance/"},"frontmatter":{"title":"The Apple Watch at a Glance"}}}}