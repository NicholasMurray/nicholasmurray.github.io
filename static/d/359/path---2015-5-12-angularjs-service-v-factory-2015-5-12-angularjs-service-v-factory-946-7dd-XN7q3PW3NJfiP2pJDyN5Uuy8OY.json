{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"74f6e8fa-3276-5bf0-8f87-bcaf0d313346","excerpt":"AngularJS has 5 ways to create services Provider - used by the other services except constant Factory - constructs a new service using a function that returnsâ€¦","html":"<p><img src=\"/images/service-v-factory.png\" alt=\"alt text \" title=\"Service versus Factory\"></p>\n<p>AngularJS has 5 ways to create services</p>\n<ol>\n<li>\n<p>Provider - used by the other services except constant</p>\n</li>\n<li>\n<p>Factory - constructs a new service using a function that returns an object</p>\n</li>\n<li>\n<p>Value - for storing simple values or objects</p>\n</li>\n<li>\n<p>Service - works the same a factory except as it is <em>newed</em> internally it uses <em>this</em> properties</p>\n</li>\n<li>\n<p>Constants - for providing configuration services</p>\n</li>\n</ol>\n<p>When I am using angular to construct a web app I create a folder called services and add my services there that are constructed using factory functions.</p>\n<p>But why do we use factory functions instead of service functions?</p>\n<p>John Papa says, as they are so similar, we should <a href=\"https://github.com/johnpapa/angular-styleguide#style-y040\">use a factory instead for consistency.</a></p>\n<p>In the angular source we can see that a service uses a factory internally</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function factory(name, factoryFn, enforce) {\n    return provider(name, {\n      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn\n    });\n}\n\nfunction service(name, constructor) {\n    return factory(name, [&#39;$injector&#39;, function($injector) {\n      return $injector.instantiate(constructor);\n    }]);\n}\n{% endhighlight %}\n\nThe typical examples of a service and factory demonstrate basic functionality in which they look virtually the same.\n\n&lt;script src=&quot;https://gist.github.com/NicholasMurray/d4c16a38f65489d01c6a.js&quot;&gt;&lt;/script&gt;\n\n\nBut how do we make better use of a service and factory?\n\n\nAn example of an appropriate use of a services ability to return a new object, would be, where prototype inheritance would allow us to call methods from a base class as well as the child class.\n\n&lt;script src=&quot;https://gist.github.com/NicholasMurray/1706ed6e967fdf79e9a9.js&quot;&gt;&lt;/script&gt;\n\nBelow is an example of an appropriate use of factory service, which is more suited, to returning data via the functions defined in the object it returns.\n\n&lt;script src=&quot;https://gist.github.com/NicholasMurray/3e14a8df444f38022b46.js&quot;&gt;&lt;/script&gt;</code></pre></div>","frontmatter":{"title":"AngularJS Service versus Factory","date":null}}},"pageContext":{"slug":"/2015-5-12-angularjs-service-v-factory/2015-5-12-angularjs-service-v-factory/","previous":{"fields":{"slug":"/2015-5-4-so-you-want-a-simple-node-http-server/2015-5-4-so-you-want-a-simple-node-http-server/"},"frontmatter":{"title":"So you want a simple Node HTTP Server?"}},"next":{"fields":{"slug":"/2015-4-3-collabocats/2015-4-3-collabocats/"},"frontmatter":{"title":"Collabocats"}}}}