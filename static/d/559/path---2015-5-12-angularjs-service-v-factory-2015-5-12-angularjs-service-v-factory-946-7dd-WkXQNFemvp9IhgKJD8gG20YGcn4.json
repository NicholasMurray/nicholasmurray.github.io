{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"74f6e8fa-3276-5bf0-8f87-bcaf0d313346","excerpt":"AngularJS has 5 ways to create services Provider - used by the other services except constant Factory - constructs a new service using a function that returns an object Value - for storing simple values or objects Service - works the same a factory except as it is  newed  internally it uses  this  properties Constants - for providing configuration services When I am using angular to construct a web app I create a folder called services and add my services there that are constructed using factory functions. But why do we use factory functions instead of service functions? John Papa says, as they are so similar, we should  use a factory instead for consistency. In the angular source we can see that a service uses a factory internally {% highlight html %}\nfunction factory(name, factoryFn, enforce) {\n    return provider(name, {\n      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn\n    });\n} function service(name, constructor) {\n    return factory(name,  ‘$injector’, function($injector) {\n      return $injector.instantiate(constructor);\n    } );\n}\n{% endhighlight %} The typical examples of a service and factory demonstrate basic functionality in which they look virtually the same. But how do we make better use of a service and factory? An example of an appropriate use of a services ability to return a new object, would be, where prototype inheritance would allow us to call methods from a base class as well as the child class. Below is an example of an appropriate use of factory service, which is more suited, to returning data via the functions defined in the object it returns.","html":"<p><img src=\"%7B%7B%20site.baseurl%20%7D%7D/images/service-v-factory.png\" alt=\"alt text \" title=\"Service versus Factory\"></p>\n<p>AngularJS has 5 ways to create services</p>\n<ol>\n<li>\n<p>Provider - used by the other services except constant</p>\n</li>\n<li>\n<p>Factory - constructs a new service using a function that returns an object</p>\n</li>\n<li>\n<p>Value - for storing simple values or objects</p>\n</li>\n<li>\n<p>Service - works the same a factory except as it is <em>newed</em> internally it uses <em>this</em> properties</p>\n</li>\n<li>\n<p>Constants - for providing configuration services</p>\n</li>\n</ol>\n<p>When I am using angular to construct a web app I create a folder called services and add my services there that are constructed using factory functions.</p>\n<p>But why do we use factory functions instead of service functions?</p>\n<p>John Papa says, as they are so similar, we should <a href=\"https://github.com/johnpapa/angular-styleguide#style-y040\">use a factory instead for consistency.</a></p>\n<p>In the angular source we can see that a service uses a factory internally</p>\n<p>{% highlight html %}\nfunction factory(name, factoryFn, enforce) {\nreturn provider(name, {\n$get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn\n});\n}</p>\n<p>function service(name, constructor) {\nreturn factory(name, [‘$injector’, function($injector) {\nreturn $injector.instantiate(constructor);\n}]);\n}\n{% endhighlight %}</p>\n<p>The typical examples of a service and factory demonstrate basic functionality in which they look virtually the same.</p>\n<script src=\"https://gist.github.com/NicholasMurray/d4c16a38f65489d01c6a.js\"></script>\n<p>But how do we make better use of a service and factory?</p>\n<p>An example of an appropriate use of a services ability to return a new object, would be, where prototype inheritance would allow us to call methods from a base class as well as the child class.</p>\n<script src=\"https://gist.github.com/NicholasMurray/1706ed6e967fdf79e9a9.js\"></script>\n<p>Below is an example of an appropriate use of factory service, which is more suited, to returning data via the functions defined in the object it returns.</p>\n<script src=\"https://gist.github.com/NicholasMurray/3e14a8df444f38022b46.js\"></script>","frontmatter":{"title":"AngularJS Service versus Factory","date":null}}},"pageContext":{"slug":"/2015-5-12-angularjs-service-v-factory/2015-5-12-angularjs-service-v-factory/","previous":{"fields":{"slug":"/2015-7-3-my-top-ten-coding-podcasts/2015-7-3-my-top-ten-coding-podcasts/"},"frontmatter":{"title":"My Top Ten Coding Podcasts"}},"next":{"fields":{"slug":"/2015-5-4-so-you-want-a-simple-node-http-server/2015-5-4-so-you-want-a-simple-node-http-server/"},"frontmatter":{"title":"So you want a simple Node HTTP Server?"}}}}