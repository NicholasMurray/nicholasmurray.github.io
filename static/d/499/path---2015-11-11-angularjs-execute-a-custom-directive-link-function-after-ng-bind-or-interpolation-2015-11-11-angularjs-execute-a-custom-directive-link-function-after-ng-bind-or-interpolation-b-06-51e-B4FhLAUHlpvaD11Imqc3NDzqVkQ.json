{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"ba3be6c7-2f7b-5df5-9340-21a819d34be1","excerpt":"<p><img src=\"%7B%7B%20site.baseurl%20%7D%7D/images/tworonnies.jpg\" alt=\"alt text \" title=\"AngularJS how to execute a custom directive link or compile function after ngBind or interpolation\"></p>\n<p>When creating your own custom angularjs directives you may wish to append a value to a variable that is being evaluated within the\nelement that you are…</p>","html":"<p><img src=\"%7B%7B%20site.baseurl%20%7D%7D/images/tworonnies.jpg\" alt=\"alt text \" title=\"AngularJS how to execute a custom directive link or compile function after ngBind or interpolation\"></p>\n<p>When creating your own custom angularjs directives you may wish to append a value to a variable that is being evaluated within the\nelement that you are attaching your directive to. </p>\n<p>If you are using a <a href=\"https://docs.angularjs.org/guide/directive\">link</a> function to manipulate a vm variable</p>\n<p>{% highlight html %}\n(function() {\nangular.module(“app”, []);\n})();</p>\n<p>(function() {\nangular.module(“app”).controller(“AppCtrl”, [AppCtrl]);\nfunction AppCtrl() {<br>\nvar vm = this;\nvm.farewell = “And it’s Goodnight ”;\nreturn vm;\n};\n})();</p>\n<p>(function() {\nangular.module(“app”).directive(“regularFarewellDirective”, function() {\nreturn {\nlink: function(scope,element,attrs) {\nvar currentValue = element.text();\nelement.text(currentValue + ” and goodbye!”);\n}\n};<br>\n});\n})();\n{% endhighlight %}</p>\n<p>{% highlight html %}</p>\n<body ng-app=\"app\">\n  <div ng-controller=\"AppCtrl as vm\">\n    <span regular-farewell-directive>{{vm.farewell}}</span>\n  </div>\n</body>\n<p>{% endhighlight %}</p>\n<p>The output would look like this as the value has not yet been evaluated.</p>\n<p>{% highlight html %}\n{{vm.farewell}} and goodbye!\n{% endhighlight %}</p>\n<p>If you used a <a href=\"https://docs.angularjs.org/api/ng/service/$compile\">compile</a> function instead</p>\n<p>{% highlight html %}\n(function() {\nangular.module(“app”).directive(“regularFarewellDirective”, function() {\nreturn {\ncompile: function(scope,element,attrs) {\nvar currentValue = element.text();\nelement.text(currentValue + ” and goodbye!”);\n}\n};<br>\n});\n})();\n{% endhighlight %}</p>\n<p>The output would be different containing just the evaluated variable value.</p>\n<p>{% highlight html %}\nAnd it’s Goodnight\n{% endhighlight %}</p>\n<h2>Executing a custom directive link function where there is a value to be evaluated in ngBind</h2>\n<p>One way around this issue would be to move the variable to the built in <a href=\"https://docs.angularjs.org/api/ng/directive/ngBind\">ngBind</a> directive and then watch for the value\nto be evaluated and then executing our code.</p>\n<p>{% highlight html %}\n(function() {\nangular.module(“app”).directive(“corbettFarewellDirective”, function() {\nreturn {\nlink: function(scope,element,attrs) {\nscope.$watch(attrs.ngBind, function(newvalue) {\nelement.text(newvalue + ” from me!”);\n});<br>\n}\n};<br>\n});\n})();\n{% endhighlight %}</p>\n<p>{% highlight html %}</p>\n<body ng-app=\"app\"> \n  <div ng-controller=\"AppCtrl as vm\">\n    <span corbett-farewell-directive ng-bind=\"vm.farewell\"></span>\n  </div>  \n</body>\n{% endhighlight %}\n<p>This would result in the desired outcome.</p>\n<p>{% highlight html %}\nAnd it’s Goodnight from me!\n{% endhighlight %}</p>\n<h2>Executing a custom directive link function where there is a value to be evaluated in ngBind</h2>\n<p>If we are not able to or, do not wish to, move the variable to an ngBind element attribute we can still watch the\nvariable being evaluated using a combination of a compile function and the <a href=\"https://docs.angularjs.org/api/ng/service/$interpolate\">$interpolate</a> service.</p>\n<p>{% highlight html %}\n(function() {\nangular.module(“app”).directive(“barkerFarewellDirective”,   function($interpolate) {\nreturn {\ncompile: function (tElem, tAttrs) {\nvar interpolateFn = $interpolate(tElem.html(), true);\ntElem.empty();\nreturn function(scope, elem, attrs){\nscope.$watch(interpolateFn, function (value) {\nvar currentText = value;\nelem.text(currentText + ” from him!”);\n});\n}\n}\n};\n})\n})();</p>\n<p>{% endhighlight %}</p>\n<p>{% highlight html %}</p>\n<body ng-app=\"app\"> \n  <div ng-controller=\"AppCtrl as vm\">\n    <span barker-farewell-directive>{{vm.farewell}}</span>\n  </div>  \n</body>\n{% endhighlight %}\n<p>Gaining the ouput that we require.</p>\n<p>{% highlight html %}\nAnd it’s Goodnight from him!\n{% endhighlight %}</p>","frontmatter":{"title":"AngularJS how to execute a custom directive link or compile function after ngBind or interpolation","date":null}}},"pageContext":{"slug":"/2015-11-11-angularjs-execute-a-custom-directive-link-function-after-ngBind-or-interpolation/2015-11-11-angularjs-execute-a-custom-directive-link-function-after-ngBind-or-interpolation/","previous":{"fields":{"slug":"/2015-12-2-git-add/2015-12-2-git-add/"},"frontmatter":{"title":"What exactly does git add -A do?"}},"next":{"fields":{"slug":"/2015-11-4-angularjs-empty-$scope-object-check/2015-11-4-angularjs-empty-$scope-object-check/"},"frontmatter":{"title":"How to check for an empty AngularJS $scope object"}}}}